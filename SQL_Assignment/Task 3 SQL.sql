USE TechShop;

/*Task 3. Aggregate functions, Having, Order By, GroupBy and Joins:  
1. Write an SQL query to retrieve a list of all orders along with customer information (e.g., 
customer name) for each order. */
SELECT O.OrderID,O.customerID,O.OrderDate, CONCAT(C.FirstName,'',C.LastName) AS FullName ,C.Address, C.Phone,C.Email FROM Orders O 
JOIN Customers C ON O.CustomerID = C.CustomerID;


/*2. Write an SQL query to find the total revenue generated by each electronic gadget product. 
Include the product name and the total revenue. */
SELECT P.ProductID ,P.ProductName,P.Price,O.Quantity ,SUM(O.Quantity*P.Price) AS Toatalrevenue FROM Products P 
JOIN OrderDetails O ON P.ProductID=O.ProductID GROUP BY P.ProductID, P.ProductName,P.Price,O.Quantity;

SELECT P.ProductID ,P.ProductName,P.Price,O.Quantity ,O.Quantity*P.Price AS Toatalrevenue FROM Products P 
JOIN OrderDetails O ON P.ProductID=O.ProductID ORDER BY P.Price ASC;

/*3. Write an SQL query to list all customers who have made at least one purchase. Include their 
names and contact information. */
SELECT DISTINCT C.CustomerID, C.FirstName, C.LastName, C.Email, C.Phone, C.Address FROM Customers C
JOIN Orders O ON C.CustomerID = O.CustomerID;

/*4. Write an SQL query to find the most popular electronic gadget, which is the one with the highest 
total quantity ordered. Include the product name and the total quantity ordered. */
SELECT TOP 1 P.ProductID, P.ProductName, SUM(O.Quantity) AS TotalQuantityOrdered FROM Products P
JOIN OrderDetails O ON P.ProductID = O.ProductID
GROUP BY P.ProductID, P.ProductName
ORDER BY TotalQuantityOrdered DESC;


/*5. Write an SQL query to retrieve a list of electronic gadgets along with their corresponding 
categories.  */
ALTER TABLE Products ADD Category  VARCHAR(100);
UPDATE Products SET Category = 'Electronics' 
WHERE ProductName IN ('Laptop', 'Smartphone', 'Tablet', 'Smartwatch', 'Wireless Earbuds', 
						'Monitor', 'Mechanical Keyboard', 'Wireless Mouse');
UPDATE Products 
SET Category = 'Non Electronics' 
WHERE ProductName NOT IN ('Laptop', 'Smartphone', 'Tablet', 'Smartwatch', 'Wireless Earbuds', 
						'Monitor', 'Mechanical Keyboard', 'Wireless Mouse');

SELECT ProductID, ProductName, Category FROM Products;


/*6. Write an SQL query to calculate the average order value for each customer. Include the 
customer's name and their average order value. */
SELECT C.CustomerID, C.FirstName, C.LastName, AVG(O.TotalAmount) AS AvgOrderValue FROM Customers C
JOIN Orders O ON C.CustomerID = O.CustomerID GROUP BY C.CustomerID, C.FirstName, C.LastName;


/*7. Write an SQL query to find the order with the highest total revenue. Include the order ID, 
customer information, and the total revenue. */
SELECT TOP 1 O.OrderID, C.FirstName, C.LastName, O.TotalAmount FROM Orders O
JOIN Customers C ON O.CustomerID = C.CustomerID ORDER BY O.TotalAmount DESC;


/*8. Write an SQL query to list electronic gadgets and the number of times each product has been 
ordered. */
SELECT P.ProductID, P.ProductName, COUNT(O.OrderID) AS OrderCount FROM Products P
JOIN OrderDetails O ON P.ProductID = O.ProductID
GROUP BY P.ProductID, P.ProductName ORDER BY OrderCount DESC;


/*9. Write an SQL query to find customers who have purchased a specific electronic gadget product. 
Allow users to input the product name as a parameter.*/
DECLARE @ProductName VARCHAR(100) = 'Tablet'; 

SELECT DISTINCT C.CustomerID, C.FirstName, C.LastName, C.Email, C.Phone, C.Address FROM Customers C
JOIN Orders O ON C.CustomerID = O.CustomerID
JOIN OrderDetails OD ON O.OrderID = OD.OrderID
JOIN Products P ON OD.ProductID = P.ProductID WHERE P.ProductName = @ProductName;


/*10. Write an SQL query to calculate the total revenue generated by all orders placed within a 
specific time period. Allow users to input the start and end dates as parameters.*/
DECLARE @StartDate DATE = '2024-01-01';
DECLARE @EndDate DATE = '2024-12-31';

SELECT SUM(O.TotalAmount) AS TotalRevenue FROM Orders O WHERE O.OrderDate BETWEEN @StartDate AND @EndDate;
